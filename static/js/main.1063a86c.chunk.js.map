{"version":3,"sources":["components/MyPlaceholder.tsx","util/colorSchemes.tsx","util/dropdowns.tsx","components/Chart.tsx","util/constStrings.tsx","components/PreChart.tsx","util/fileConvert.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyPlaceholder","Placeholder","Header","image","Line","Paragraph","customColorSchemes","Meine","chroma","scale","colors","MeineBoolean","MeineViolet","brewer","fileTypeList","key","text","value","chartNameList","axisNameList","colorSchemeList","value2","Accent","Set1","Set2","Set3","Spectral","Paired","Pastel1","Pastel2","Dark2","Greys","Blues","BrBG","BuGn","BuPu","GnBu","Greens","OrRd","Oranges","PRGn","PiYG","PuBu","PuBuGn","PuOr","PuRd","RdPu","RdYlBu","RdYlGn","Reds","YlGn","YlGnBu","YlOrBr","YlOrRd","Chart","props","upData","loading","showError","keyNameList","dataNameList","useState","chartName","setChartName","xAxis","setXAxis","yAxis","setYAxis","sortedAxis","setSortedAxis","minGroupSize","setMinGroupSize","showEtc","setShowEtc","colorScheme","setColorScheme","fontSize","setFontSize","chartExtra","setChartExtra","handleChartExtraChange","_","prev","infoOpen","setInfoOpen","saveAs","uri","filename","link","document","createElement","download","href","body","appendChild","click","removeChild","window","open","printDocument","scrollTo","input","getElementById","html2canvas","height","then","canvas","imgData","toDataURL","now","Date","fileName","getFullYear","getMonth","getDay","getHours","getMinutes","pdf","jsPDF","pdfWidth","internal","pageSize","getWidth","pdfHeight","width","addImage","save","Segment","length","chartDatum","chartData","forEach","p","undefined","match","filter","item","data","counter","push","temp","reduce","next","Math","round","sort","a","b","toString","localeCompare","Modal","onClose","Content","List","bulleted","Item","Actions","Button","onClick","inverted","content","as","Form","Group","widths","Field","Dropdown","selection","placeholder","onChange","options","Input","type","Checkbox","toggle","style","marginTop","checked","id","series","label","explode","Number","tickSeries","tickSize","layout","bar","rounded","jsonExample","brand","model","year","price","rating","PreChart","setUpData","fileType","setFileType","csvSeparator","setCsvSeparator","setKeyNameList","setDataNameList","onDrop","useCallback","acceptedFiles","keyNameList2","dataNameList2","reader","FileReader","readAsText","onload","objs","fileContents","separator","lines","split","result","headers","i","obj","currentline","j","csvConvert","JSON","parse","Object","entries","field","isNumeric","Array","fill","o","index","index2","useDropzone","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","Popup","trigger","color","stringify","Container","textAlign","className","App","vertical","padding","Grid","divided","stackable","Row","Column","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1063a86c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Placeholder } from \"semantic-ui-react\";\r\n\r\nconst MyPlaceholder = () => (\r\n    <Placeholder>\r\n        <Placeholder.Header image>\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n        </Placeholder.Header>\r\n        <Placeholder.Paragraph>\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n            <Placeholder.Line />\r\n        </Placeholder.Paragraph>\r\n    </Placeholder>\r\n);\r\n\r\nexport default MyPlaceholder;\r\n","import chroma from \"chroma-js\";\r\n\r\n/**\r\n * Color Schemes\r\n * Credits: https://gka.github.io/chroma.js/#chroma-brewer\r\n */\r\nexport const customColorSchemes = {\r\n    Meine: chroma.scale([\"#6d32a8\", \"#326da8\", \"#32a8a8\", \"#6da832\"]).colors(8),\r\n    MeineBoolean: chroma.scale([\"#326da8\", \"#32a8a8\"]).colors(2),\r\n    MeineViolet: chroma.scale([\"#6435c9\"]).colors(1),\r\n    ...chroma.brewer\r\n};\r\n","import { customColorSchemes } from \"./colorSchemes\";\r\n\r\nexport const fileTypeList = [\r\n    { key: \"csv\", text: \"csv\", value: \"csv\" },\r\n    { key: \"json\", text: \"json\", value: \"json\" }\r\n    //{ key: \"xml\", text: \"xml\", value: \"xml\" }\r\n    //{ key: \"excel\", text: \"excel (.xlsx/.xls)\", value: \"excel\" }\r\n];\r\n\r\nexport const chartNameList = [\r\n    { key: \"pie\", text: \"pie\", value: \"pie\" },\r\n    { key: \"bar\", text: \"bar\", value: \"bar\" }\r\n    // { key: \"line\", text: \"line\", value: \"line\" }\r\n];\r\n\r\nexport const axisNameList = [\r\n    { key: \"x\", text: \"sort by name\", value: \"x\" },\r\n    { key: \"y\", text: \"sort by value\", value: \"y\" }\r\n];\r\n\r\nexport const colorSchemeList = [\r\n    { key: \"Default\", text: \"Default\", value2: customColorSchemes.Meine, value: \"0\" },\r\n    { key: \"Accent\", text: \"Accent\", value2: customColorSchemes.Accent, value: \"1\" },\r\n    { key: \"Set 1\", text: \"Set 1\", value2: customColorSchemes.Set1, value: \"2\" },\r\n    { key: \"Set 2\", text: \"Set 2\", value2: customColorSchemes.Set2, value: \"3\" },\r\n    { key: \"Set 3\", text: \"Set 3\", value2: customColorSchemes.Set3, value: \"4\" },\r\n    { key: \"Spectral\", text: \"Spectral\", value2: customColorSchemes.Spectral, value: \"5\" },\r\n    { key: \"Paired\", text: \"Paired\", value2: customColorSchemes.Paired, value: \"6\" },\r\n    { key: \"Pastel 1\", text: \"Pastel 1\", value2: customColorSchemes.Pastel1, value: \"7\" },\r\n    { key: \"Pastel 2\", text: \"Pastel 2\", value2: customColorSchemes.Pastel2, value: \"8\" },\r\n    { key: \"Dark\", text: \"Dark\", value2: customColorSchemes.Dark2, value: \"9\" },\r\n    { key: \"Greys\", text: \"Greys\", value2: customColorSchemes.Greys, value: \"10\" },\r\n\r\n    { key: \"Blues\", text: \"Blues\", value2: customColorSchemes.Blues, value: \"11\" },\r\n    { key: \"BrBG\", text: \"BrBG\", value2: customColorSchemes.BrBG, value: \"12\" },\r\n    { key: \"BuGn\", text: \"BuGn\", value2: customColorSchemes.BuGn, value: \"13\" },\r\n    { key: \"BuPu\", text: \"BuPu\", value2: customColorSchemes.BuPu, value: \"14\" },\r\n    { key: \"GnBu\", text: \"GnBu\", value2: customColorSchemes.GnBu, value: \"15\" },\r\n    { key: \"Greens\", text: \"Greens\", value2: customColorSchemes.Greens, value: \"16\" },\r\n    { key: \"OrRd\", text: \"OrRd\", value2: customColorSchemes.OrRd, value: \"17\" },\r\n    { key: \"Oranges\", text: \"Oranges\", value2: customColorSchemes.Oranges, value: \"18\" },\r\n    { key: \"PRGn\", text: \"PRGn\", value2: customColorSchemes.PRGn, value: \"19\" },\r\n    { key: \"PiYG\", text: \"PiYG\", value2: customColorSchemes.PiYG, value: \"20\" },\r\n    { key: \"PuBu\", text: \"PuBu\", value2: customColorSchemes.PuBu, value: \"21\" },\r\n    { key: \"PuBuGn\", text: \"PuBuGn\", value2: customColorSchemes.PuBuGn, value: \"22\" },\r\n    { key: \"PuOr\", text: \"PuOr\", value2: customColorSchemes.PuOr, value: \"23\" },\r\n    { key: \"PuRd\", text: \"PuRd\", value2: customColorSchemes.PuRd, value: \"24\" },\r\n    { key: \"RdPu\", text: \"RdPu\", value2: customColorSchemes.RdPu, value: \"25\" },\r\n    { key: \"RdYlBu\", text: \"RdYlBu\", value2: customColorSchemes.RdYlBu, value: \"26\" },\r\n    { key: \"RdYlGn\", text: \"RdYlGn\", value2: customColorSchemes.RdYlGn, value: \"27\" },\r\n    { key: \"Reds\", text: \"Reds\", value2: customColorSchemes.Reds, value: \"28\" },\r\n    { key: \"YlGn\", text: \"YlGn\", value2: customColorSchemes.YlGn, value: \"29\" },\r\n    { key: \"YlGnBu\", text: \"YlGnBu\", value2: customColorSchemes.YlGnBu, value: \"30\" },\r\n    { key: \"YlOrBr\", text: \"YlOrBr\", value2: customColorSchemes.YlOrBr, value: \"31\" },\r\n    { key: \"YlOrRd\", text: \"YlOrRd\", value2: customColorSchemes.YlOrRd, value: \"32\" }\r\n];\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    BarSeries,\r\n    LinearXAxis,\r\n    LinearXAxisTickLabel,\r\n    LinearXAxisTickSeries,\r\n    LinearYAxis,\r\n    LinearYAxisTickSeries,\r\n    LineChart,\r\n    PieArcSeries,\r\n    PieChart,\r\n    PieArcLabel,\r\n    LinearYAxisTickLabel\r\n} from \"reaviz\";\r\nimport { Button, Form, Header, Modal, Segment, List } from \"semantic-ui-react\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nimport IChartData from \"../model/ChartData\";\r\nimport MyPlaceholder from \"./MyPlaceholder\";\r\nimport { chartNameList, axisNameList, colorSchemeList } from \"../util/dropdowns\";\r\n\r\ninterface IChartProps {\r\n    upData: object[];\r\n    loading: boolean;\r\n    showError: boolean;\r\n    keyNameList: { key: string; text: string; value: string }[];\r\n    dataNameList: { key: string; text: string; value: string }[];\r\n}\r\n\r\nconst Chart: React.FC<IChartProps> = (props: IChartProps) => {\r\n    const { upData, loading, showError, keyNameList, dataNameList } = props;\r\n\r\n    const [chartName, setChartName] = useState(chartNameList[0].value);\r\n    const [xAxis, setXAxis] = useState(keyNameList[0].value);\r\n    const [yAxis, setYAxis] = useState(dataNameList[0].value);\r\n    const [sortedAxis, setSortedAxis] = useState(axisNameList[0].value);\r\n    const [minGroupSize, setMinGroupSize] = useState(1);\r\n    const [showEtc, setShowEtc] = useState(true);\r\n    const [colorScheme, setColorScheme] = useState(colorSchemeList[0].value);\r\n    const [fontSize, setFontSize] = useState(18);\r\n    const [chartExtra, setChartExtra] = useState(false);\r\n\r\n    const handleChartNameChange = (_: any, { value }: any) => setChartName(value);\r\n    const handleXAxisChange = (_: any, { value }: any) => setXAxis(value);\r\n    const handleYAxisChange = (_: any, { value }: any) => setYAxis(value);\r\n    const handleSortedAxisChange = (_: any, { value }: any) => setSortedAxis(value);\r\n    const handleMinGroupSizeChange = (_: any, { value }: any) => setMinGroupSize(value);\r\n    const handleShowEtcChange = (_: any) => setShowEtc((prev: boolean) => !prev);\r\n    const handleFontSizeChange = (_: any, { value }: any) => setFontSize(value);\r\n    const handleColorShemeChange = (_: any, { value }: any) => setColorScheme(value);\r\n    const handleChartExtraChange = (_: any) => setChartExtra((prev: boolean) => !prev);\r\n\r\n    const [infoOpen, setInfoOpen] = useState(false);\r\n\r\n    const saveAs = (uri: string, filename: string) => {\r\n        var link = document.createElement(\"a\");\r\n\r\n        if (typeof link.download === \"string\") {\r\n            link.href = uri;\r\n            link.download = filename;\r\n            document.body.appendChild(link); //Firefox requires the link to be in the body\r\n            link.click(); //simulate click\r\n            document.body.removeChild(link); //remove the link when done\r\n        } else {\r\n            window.open(uri);\r\n        }\r\n    };\r\n\r\n    const printDocument = (image: boolean = false) => {\r\n        window.scrollTo(0, 0);\r\n        let input = document.getElementById(\"divToPrint\");\r\n\r\n        html2canvas(input!, { height: 500 }).then((canvas) => {\r\n            const imgData = canvas.toDataURL(\"image/png\");\r\n\r\n            const now = new Date();\r\n            const fileName = `AggregateCharts_${now.getFullYear()}-${now.getMonth()}-${now.getDay()}_${now.getHours()}-${now.getMinutes()}`;\r\n            if (image) {\r\n                saveAs(canvas.toDataURL(), `${fileName}.png`);\r\n            } else {\r\n                const pdf = new jsPDF();\r\n                const pdfWidth = pdf.internal.pageSize.getWidth();\r\n                const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\r\n                pdf.addImage(imgData, \"JPEG\", 5, 5, pdfWidth - 5, pdfHeight - 5);\r\n                pdf.save(`${fileName}.pdf`);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (showError) {\r\n        return <Segment>Error.</Segment>;\r\n    } else if (loading) {\r\n        return <MyPlaceholder />;\r\n    } else if (!upData || upData.length === 0) {\r\n        return <Segment>No data.</Segment>;\r\n    } else {\r\n        let chartData: IChartData[] = [];\r\n        let chartDatum: IChartData;\r\n        let usedDataSize: number = 0;\r\n\r\n        upData.forEach((p: any) => {\r\n            if (p[xAxis] !== undefined && p[xAxis] !== 0 && p[xAxis] !== \"\") {\r\n                const match = chartData.filter((item: IChartData) => item.key === p[xAxis]);\r\n                // new entry or incrementing an existing one\r\n                if (p[yAxis] !== undefined || yAxis === \"MyCount\") {\r\n                    usedDataSize += 1;\r\n                    if (match.length === 0) {\r\n                        chartDatum = { key: p[xAxis], data: p[yAxis], counter: 1 };\r\n                        chartData.push(chartDatum);\r\n                    } else {\r\n                        match[0].data += p[yAxis];\r\n                        match[0].counter += 1;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (chartName !== \"line\") {\r\n            // aggregating small categories on pie/bar\r\n            const temp = chartData.filter((item: IChartData) => item.counter < minGroupSize);\r\n            chartDatum = {\r\n                key: \"Aggregated groups\",\r\n                data: temp.reduce((prev: number, next: IChartData) => prev + (next.data || 0), 0),\r\n                counter: temp.reduce((prev: number, next: IChartData) => prev + (next.counter || 0), 0)\r\n            };\r\n            // to include or not the aggregated small categories\r\n            if (showEtc) {\r\n                chartData.push(chartDatum);\r\n            } else {\r\n                usedDataSize -= chartDatum.counter;\r\n            }\r\n        }\r\n\r\n        if (yAxis !== \"MyCount\") {\r\n            // if not population size statistic, divide and round the aggregate with the counter\r\n            chartData.forEach((item: IChartData) => (item.data = Math.round((item.data / item.counter) * 100) / 100));\r\n        } else {\r\n            // if population size statistic, then the data is the counter\r\n            chartData.forEach((item: IChartData) => (item.data = item.counter));\r\n        }\r\n\r\n        //TODO line is year\r\n        // filter by the aggregate axis by group size on pie/bar\r\n        if (chartName !== \"line\") {\r\n            if (yAxis === \"MyCount\") {\r\n                chartData = chartData.filter((item: IChartData) => item.data >= minGroupSize);\r\n            } else {\r\n                chartData = chartData.filter((item: IChartData) => item.counter >= minGroupSize);\r\n            }\r\n        }\r\n\r\n        //TODO boolean support\r\n        // // boolean main axis\r\n        // if (xAxis.startsWith(\"is\")) {\r\n        //     colorScheme = customColorSchemes.MeineBoolean;\r\n        //     chartData.forEach((item: IChartData) => (item.key = item.key ? \"Yes\" : \"No\"));\r\n        // }\r\n\r\n        // sort by the selected sorting axis\r\n        if (chartName === \"line\") {\r\n            chartData = chartData.sort((a: IChartData, b: IChartData) => a.key - b.key);\r\n        } else if (sortedAxis === \"x\") {\r\n            chartData = chartData.sort((a: IChartData, b: IChartData) => (b.key.toString() as string).localeCompare(a.key));\r\n        } else {\r\n            chartData = chartData.sort((a: IChartData, b: IChartData) => a.data - b.data);\r\n        }\r\n\r\n        if (chartName === \"pie\") {\r\n            chartData.forEach((item: IChartData) => (item.key = item.key + \": \" + item.data));\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal open={infoOpen} onClose={() => setInfoOpen(false)}>\r\n                    <Modal.Header>About the chart designer</Modal.Header>\r\n                    <Modal.Content>\r\n                        <List bulleted>\r\n                            <List.Item>\r\n                                Under <b>Common property</b> you can select the data field which will be the common (grouping) factor in the diagram,\r\n                                while the <b>Value axis</b> option marks the aggregated attribute of these groups: either some sort of average, or\r\n                                simply the size of the respective group (first option).\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                Under <b>Sort by</b> you can toggle between ordering the groups aphanumerically, by the Common Property or\r\n                                numerically, decreasing, by the aggregated Value.\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                The value entered in the <b>Minimum group size</b> field will act as an upper limit to the sizes of the groups, so\r\n                                groups aggregated by less values will be combined into a category named <i>Aggregated groups</i>, to make your chart\r\n                                more transparent.\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                This <i>Aggregated</i> group sometimes can grow rather big depending on your search, and more importantly on the\r\n                                increased\r\n                                <i>Minimum group size</i>, this is why you can toggle between showing and hiding this Aggregated group on your chart\r\n                                by the\r\n                                <b>Show aggregated small groups</b> dial.\r\n                            </List.Item>\r\n                        </List>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={() => setInfoOpen(false)} inverted content=\"Back\" />\r\n                    </Modal.Actions>\r\n                </Modal>\r\n                <br />\r\n                <br />\r\n                <Header as=\"h2\">\r\n                    3. Configure &amp; customize it (\r\n                    <a href=\"#\" onClick={() => setInfoOpen(true)}>\r\n                        help\r\n                    </a>\r\n                    )\r\n                </Header>\r\n\r\n                <Form>\r\n                    <Form.Group widths={3}>\r\n                        <Form.Field>\r\n                            <b>Chart type</b>\r\n                            <Form.Dropdown\r\n                                selection\r\n                                placeholder=\"Chart type\"\r\n                                value={chartName}\r\n                                onChange={handleChartNameChange}\r\n                                options={chartNameList}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <b>Common property</b>\r\n                            <Form.Dropdown selection placeholder=\"Main axis\" value={xAxis} onChange={handleXAxisChange} options={keyNameList} />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <b>Value axis</b>\r\n                            <Form.Dropdown selection placeholder=\"Secondary axis\" value={yAxis} onChange={handleYAxisChange} options={dataNameList} />\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group widths={3}>\r\n                        {chartName !== \"line\" && (\r\n                            <>\r\n                                <Form.Field>\r\n                                    <b>Sort by</b>\r\n                                    <Form.Dropdown\r\n                                        selection\r\n                                        placeholder=\"Sorted axis\"\r\n                                        value={sortedAxis}\r\n                                        onChange={handleSortedAxisChange}\r\n                                        options={axisNameList}\r\n                                    />\r\n                                </Form.Field>\r\n\r\n                                <Form.Field>\r\n                                    <b>Minimum group size</b>\r\n                                    <Form.Input type=\"number\" value={minGroupSize} onChange={handleMinGroupSizeChange} />\r\n                                </Form.Field>\r\n\r\n                                <Form.Field>\r\n                                    <b>Show aggregated small groups</b>\r\n                                    <Form.Checkbox toggle style={{ marginTop: \"0.8em\" }} checked={showEtc} onChange={handleShowEtcChange} />\r\n                                </Form.Field>\r\n                            </>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n                    <br />\r\n                    <Form.Group widths={3}>\r\n                        <Form.Field>\r\n                            <b>Color scheme</b>\r\n                            <Form.Dropdown\r\n                                selection\r\n                                placeholder=\"Color scheme\"\r\n                                value={colorScheme}\r\n                                onChange={handleColorShemeChange}\r\n                                options={colorSchemeList}\r\n                            />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            <b>Label font size</b>\r\n                            <Form.Input type=\"number\" value={fontSize} onChange={handleFontSizeChange} />\r\n                        </Form.Field>\r\n\r\n                        <Form.Field>\r\n                            {chartName === \"pie\" && (\r\n                                <>\r\n                                    <b>Explode</b>\r\n                                    <Form.Checkbox toggle style={{ marginTop: \"0.8em\" }} checked={chartExtra} onChange={handleChartExtraChange} />\r\n                                </>\r\n                            )}\r\n                            {chartName === \"bar\" && (\r\n                                <>\r\n                                    <b>Vertical</b>\r\n                                    <Form.Checkbox toggle style={{ marginTop: \"0.8em\" }} checked={chartExtra} onChange={handleChartExtraChange} />\r\n                                </>\r\n                            )}\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n                {chartData.length === 0 ? (\r\n                    <Header as=\"h4\">\r\n                        <b>No data to show. Try another configration.</b>\r\n                    </Header>\r\n                ) : (\r\n                    // ) : chartName === \"line\" && !xAxis.includes(\"Year\") ? (\r\n                    //     <Header as=\"h4\">\r\n                    //         <b>This chart type doesn't work with this Common property. Try another configration.</b>\r\n                    //     </Header>\r\n                    <>\r\n                        <br />\r\n                        <br />\r\n                        <Header as=\"h2\">4. Enjoy, and save it down</Header>\r\n\r\n                        <Button onClick={() => printDocument()}>Save chart as PDF</Button>\r\n                        <Button onClick={() => printDocument(true)}>Save chart as image</Button>\r\n\r\n                        {/* <p style={{ marginTop: \"2em\" }}>\r\n                            {upData.length} entities found matching your search, from this {usedDataSize} are used in this chart instance.\r\n                        </p> */}\r\n\r\n                        <div style={{ height: \"480px\", width: \"100%\" }} id=\"divToPrint\">\r\n                            {chartName === \"line\" ? (\r\n                                <LineChart\r\n                                    data={chartData}\r\n                                    // series={\r\n                                    //     <LineSeries\r\n                                    //         colorScheme={colorSchemeList[Number(colorScheme)].value2}\r\n                                    //         animated\r\n                                    //         interpolation=\"smooth\"\r\n                                    //         line={<Line strokeWidth={2} />}\r\n                                    //     />\r\n                                    // }\r\n                                    // xAxis={\r\n                                    //     <LinearXAxis\r\n                                    //         type=\"duration\"\r\n                                    //         domain={[chartData[0].key, chartData[chartData.length - 1].key]}\r\n                                    //         tickSeries={\r\n                                    //             <LinearXAxisTickSeries label={<LinearXAxisTickLabel rotation={false} fontSize={fontSize} />} />\r\n                                    //         }\r\n                                    //     />\r\n                                    // }\r\n                                    // yAxis={<LinearYAxis type=\"duration\" />}\r\n                                />\r\n                            ) : chartName === \"pie\" ? (\r\n                                <PieChart\r\n                                    data={chartData}\r\n                                    series={\r\n                                        <PieArcSeries\r\n                                            label={<PieArcLabel fontSize={fontSize} />}\r\n                                            explode={chartExtra}\r\n                                            colorScheme={colorSchemeList[Number(colorScheme)].value2}\r\n                                        />\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                chartName === \"bar\" && (\r\n                                    <BarChart\r\n                                        data={chartData}\r\n                                        xAxis={\r\n                                            <LinearXAxis\r\n                                                type={chartExtra ? \"category\" : \"value\"}\r\n                                                tickSeries={\r\n                                                    <LinearXAxisTickSeries\r\n                                                        tickSize={chartExtra ? 10 : 50}\r\n                                                        label={<LinearXAxisTickLabel fontSize={fontSize} />}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        }\r\n                                        yAxis={\r\n                                            <LinearYAxis\r\n                                                type={chartExtra ? \"value\" : \"category\"}\r\n                                                tickSeries={\r\n                                                    <LinearYAxisTickSeries\r\n                                                        tickSize={chartExtra ? 50 : 10}\r\n                                                        label={<LinearYAxisTickLabel fontSize={fontSize} />}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        }\r\n                                        series={\r\n                                            <BarSeries\r\n                                                colorScheme={colorSchemeList[Number(colorScheme)].value2}\r\n                                                layout={chartExtra ? \"vertical\" : \"horizontal\"}\r\n                                                bar={<Bar rounded />}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Chart;\r\n","export const csvExample = `brand,model,year,price,rating\r\nford,mustang,1970,200,9\r\nford,camaro,1990,200,6\r\ndacia,duster,2012,50,6\r\ndacia,solenza,1985,10,1\r\ntesla,roadster,2020,200,10\r\ndacia,logan,2000,50,4\r\nbugatti,veyron,2020,500,10`;\r\n\r\nexport const jsonExample = [\r\n    { brand: \"ford\", model: \"mustang\", year: 1970, price: 200, rating: 9 },\r\n    { brand: \"ford\", model: \"camaro\", year: 1990, price: 200, rating: 6 },\r\n    { brand: \"dacia\", model: \"duster\", year: 2012, price: 50, rating: 6 },\r\n    { brand: \"dacia\", model: \"solenza\", year: 1985, price: 10, rating: 1 },\r\n    { brand: \"tesla\", model: \"roadster\", year: 2020, price: 200, rating: 10 },\r\n    { brand: \"dacia\", model: \"logan\", year: 2000, price: 50, rating: 4 },\r\n    { brand: \"bugatti\", model: \"veyron\", year: 2020, price: 500, rating: 10 }\r\n];\r\n","import React, { useCallback, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Container, Form, Popup, Header } from \"semantic-ui-react\";\r\n\r\nimport Chart from \"./Chart\";\r\nimport { fileTypeList } from \"../util/dropdowns\";\r\nimport { csvConvert, jsonConvert } from \"../util/fileConvert\";\r\nimport { jsonExample, csvExample } from \"../util/constStrings\";\r\n\r\nconst PreChart: React.FC = () => {\r\n    const [upData, setUpData] = useState([] as any[]);\r\n\r\n    const [fileType, setFileType] = useState(fileTypeList[0].value);\r\n    const handleFileTypeChange = (_: any, { value }: any) => setFileType(value);\r\n\r\n    const [csvSeparator, setCsvSeparator] = useState(\",\");\r\n    const handleCsvSeparatorChange = (_: any, { value }: any) => setCsvSeparator(value);\r\n\r\n    const [keyNameList, setKeyNameList] = useState([] as { key: string; text: string; value: string }[]);\r\n    const [dataNameList, setDataNameList] = useState([] as { key: string; text: string; value: string }[]);\r\n\r\n    const onDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let keyNameList2: { key: string; text: string; value: string }[] = [];\r\n            let dataNameList2: { key: string; text: string; value: string }[] = [];\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsText(acceptedFiles[0]);\r\n            reader.onload = () => {\r\n                let objs;\r\n                switch (fileType) {\r\n                    case \"csv\":\r\n                        objs = csvConvert(reader.result!.toString(), csvSeparator);\r\n                        break;\r\n                    case \"json\":\r\n                        objs = jsonConvert(reader.result!.toString());\r\n                        break;\r\n                    // case \"xml\":\r\n                    //     objs = xmlConvert(reader.result!.toString());\r\n                    //     break;\r\n                    // case \"excel\":\r\n                    //     objs = excelConvert(reader.result!.toString());\r\n                    //     break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                Object.entries(objs[0]).forEach((field: [string, any]) => {\r\n                    keyNameList2.push({ key: field[0], text: field[0], value: field[0] });\r\n                });\r\n                dataNameList2.push({ key: \"MyCount\", text: \"Count\", value: \"MyCount\" });\r\n\r\n                let isNumeric: boolean[] = new Array(keyNameList2.length).fill(true);\r\n\r\n                objs.forEach((o: any) => {\r\n                    Object.entries(o).forEach((field: [string, any], index: number) => {\r\n                        if (!Number(field[1]) && field[1] !== \"\" && Number(field[1]) !== 0) {\r\n                            isNumeric[index] = false;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                Object.entries(objs[0]).forEach((field: [string, any], index: number) => {\r\n                    if (isNumeric[index]) {\r\n                        dataNameList2.push({ key: field[0], text: \"avg. \" + field[0], value: field[0] });\r\n                    }\r\n                });\r\n\r\n                objs.forEach((o: any) => {\r\n                    Object.entries(o).forEach((field: [string, any], index2: number) => {\r\n                        if (isNumeric[index2]) {\r\n                            if (field[1] === \"\") {\r\n                                o[field[0]] = undefined;\r\n                            } else {\r\n                                o[field[0]] = Number(field[1]);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                setUpData(objs);\r\n\r\n                setKeyNameList(keyNameList2);\r\n                setDataNameList(dataNameList2);\r\n            };\r\n        },\r\n        [fileType, csvSeparator]\r\n    );\r\n\r\n    const { isDragActive, getRootProps, getInputProps, isDragReject } = useDropzone({\r\n        onDrop,\r\n        minSize: 0,\r\n        maxSize: 20971520\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <br />\r\n            <Header as=\"h2\">0. What is this?</Header>\r\n            <p>\r\n                A tool that can process JSON and CSV (exportable from spreadsheets or excel) data files. It identifies numerical attributes and groups\r\n                the given data by the selected column. The sizes of these groups or different averages related to it can be displayed on the charts.\r\n            </p>\r\n\r\n            <br />\r\n            <Header as=\"h2\">1. Start by selecting a file type</Header>\r\n            <Form>\r\n                <Form.Group widths={5}>\r\n                    <Form.Field>\r\n                        <b>File type</b>\r\n                        <Form.Dropdown selection placeholder=\"File type\" value={fileType} onChange={handleFileTypeChange} options={fileTypeList} />\r\n                    </Form.Field>\r\n                    {fileType === \"csv\" && (\r\n                        <Form.Field>\r\n                            <b>Separator</b>\r\n                            <Form.Input value={csvSeparator} onChange={handleCsvSeparatorChange} />\r\n                        </Form.Field>\r\n                    )}\r\n                </Form.Group>\r\n            </Form>\r\n            {fileType === \"csv\" ? (\r\n                <span>\r\n                    The first row must contain the names of the columns, like{\" \"}\r\n                    <Popup content={<code>{csvExample}</code>} trigger={<span style={{ color: \"blue\" }}>this</span>} />.\r\n                </span>\r\n            ) : (\r\n                <span>\r\n                    Provide a valid JSON array, like{\" \"}\r\n                    <Popup content={<code>{JSON.stringify(jsonExample)}</code>} trigger={<span style={{ color: \"blue\" }}>this</span>} />. Can have\r\n                    other formatting.\r\n                </span>\r\n            )}\r\n\r\n            <br />\r\n            <br />\r\n            <Header as=\"h2\">2. Upload your data file</Header>\r\n            <Container textAlign=\"center\">\r\n                <div {...getRootProps()} className=\"dropzone\">\r\n                    <input {...getInputProps()} />\r\n                    {!isDragActive && \"Click here or drop a file to upload!\"}\r\n                    {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\r\n                    {isDragReject && \"File type not accepted, sorry!\"}\r\n                </div>\r\n            </Container>\r\n\r\n            {upData.length > 0 && keyNameList.length > 0 && dataNameList.length > 0 && (\r\n                <Chart loading={false} showError={false} upData={upData} dataNameList={dataNameList} keyNameList={keyNameList} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PreChart;\r\n","export const csvConvert = (fileContents: string, separator: string): object[] => {\r\n    var lines = (fileContents + \"\").split(\"\\n\");\r\n    var result = [];\r\n    var headers = lines[0].split(separator);\r\n\r\n    for (var i = 1; i < lines.length - 1; i++) {\r\n        var obj: any = {};\r\n        var currentline = lines[i].split(separator);\r\n        for (var j = 0; j < headers.length; j++) {\r\n            obj[headers[j]] = currentline[j];\r\n        }\r\n        result.push(obj);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const jsonConvert = (fileContents: string): object[] => {\r\n    return JSON.parse(fileContents);\r\n};\r\n","import React from \"react\";\nimport { Container, Segment, Grid, Header } from \"semantic-ui-react\";\n\nimport PreChart from \"./components/PreChart\";\n\nfunction App() {\n    return (\n        <div>\n            <div id=\"not-a-footer\">\n                <Segment inverted vertical style={{ padding: \"1.5em 0em\" }}>\n                    <Container>\n                        <Grid divided inverted stackable>\n                            <Grid.Row>\n                                <Grid.Column width={16}>\n                                    <Header as=\"h1\" inverted style={{ fontSize: \"4em\" }}>\n                                        Aggregate-charts\n                                    </Header>\n                                    <p style={{ fontSize: \"1.5em\", textAlign: \"right\" }}>\n                                        Group and Visualize your data to bring the maximum out of it\n                                    </p>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Container>\n                </Segment>\n\n                <Container>\n                    <PreChart />\n                </Container>\n            </div>\n            <div id=\"footer\">\n                <Segment inverted vertical style={{ padding: \"1.5em 0em\" }}>\n                    <Container>\n                        <Grid divided inverted stackable>\n                            <Grid.Row>\n                                <Grid.Column width={8}>\n                                    <Header as=\"h4\" inverted>\n                                        Contact\n                                    </Header>\n                                    <p>\n                                        Write me your feedback and suggestions to <a href=\"mailto:csekealpar12@gmail.com\">csekealpar12@gmail.com</a>.\n                                    </p>\n                                </Grid.Column>\n                                <Grid.Column width={8}>\n                                    <Header as=\"h4\" inverted>\n                                        Support\n                                    </Header>\n                                    <p>\n                                        <a href=\"https://www.buymeacoffee.com/alparius\">Buy Me A Coffee</a> if you like this tool.\n                                        <br />\n                                        Or you can send a few bucks directly through <a href=\"https://paypal.me/alparius?locale.x=en_US\">PayPal</a>.\n                                        {/* <link href=\"https://fonts.googleapis.com/css?family=Arial\" rel=\"stylesheet\" />\n                                        <a className=\"bmc-button\" target=\"_blank\" href=\"https://www.buymeacoffee.com/alparius\">\n                                            <img src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\" alt=\"Buy me a coffee\" />\n                                            <span style={{ marginLeft: \"5px\", fontSize: \"19px !important\" }}>Buy me a coffee</span>\n                                        </a> */}\n                                    </p>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Container>\n                </Segment>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}